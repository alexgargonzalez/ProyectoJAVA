/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package izv.zaidinvergeles.tienda;

import izv.zaidinvergeles.tienda.Carrito;
import izv.zaidinvergeles.tienda.Menu;
import izv.zaidinvergeles.tienda.Product;
import izv.zaidinvergeles.tienda.mysqlconnector.ConexionDB;
import izv.zaidinvergeles.tienda.mysqlconnector.consultas;
import javax.swing.DefaultListModel;

/**
 *
 * @author alfon
 */
public class Interfaz_Carrito extends javax.swing.JFrame {

    
   private java.util.List<Product> productosEnCarrito = new java.util.ArrayList<>(); // Declara una lista para almacenar los productos en el carrito, inicializada como un ArrayList.
    
    /**
     * Crea una nueva instancia de la interfaz del carrito.
     */
    private Carrito carrito; // Declara un objeto Carrito que contendrá los productos del carrito de compras.
    
    private int idCliente; // Declara una variable para almacenar el ID del cliente.
    private consultas sql = new consultas(); // Crea una instancia de la clase consultas para realizar operaciones de base de datos.

    /**
     * Constructor de la clase Interfaz_Carrito.
     */
    public Interfaz_Carrito() { // Constructor de la clase.
        initComponents(); // Llama al método que inicializa los componentes de la interfaz gráfica (genera la GUI).

        // Obtenemos el ID del cliente conectado actualmente
        this.idCliente = sql.getIdCliente(); // Llama al método getIdCliente() de la clase consultas para obtener el ID del cliente actual y lo asigna a la variable idCliente.
        
        this.carrito = new Carrito(); // Inicializa el objeto carrito como una nueva instancia de la clase Carrito.
        
        String html = "<html><u>Continue shopping</u></html>"; // Crea un string en formato HTML para mostrar "Seguir comprando" subrayado en la interfaz.

        // Cargamos los productos del carrito de ESTE cliente
        carrito.getCarrito().addAll( // Agrega todos los productos obtenidos del carrito del cliente a la lista del carrito.
            sql.obtenerProductosDelCarrito(idCliente) // Llama al método obtenerProductosDelCarrito() de la clase consultas, pasando el idCliente para obtener los productos del carrito de ese cliente.
        );
        
        seguirComprando.setText(html); // Establece el texto del componente seguirComprando con el string HTML creado anteriormente.
        
        mostrarProductosEnCarrito(); // Llama al método mostrarProductosEnCarrito() para actualizar la visualización de los productos en el carrito.
        
        System.out.println("ID Cliente en Interfaz_Carrito: " + idCliente); // Imprime en la consola el ID del cliente para fines de depuración.
    }
    
    /**
     * Método que muestra los productos en el carrito en la interfaz gráfica.
     */
    private void mostrarProductosEnCarrito() { // Método que muestra los productos en el carrito en la interfaz gráfica.
        DefaultListModel<String> listModel = new DefaultListModel<>(); // Crea un nuevo modelo de lista para almacenar los elementos que se mostrarán en la lista.

        for (Product producto : carrito.getCarrito()) { // Itera sobre cada producto en el carrito.
            listModel.addElement(producto.getName() + " - " + producto.getPrice() + "€"); // Agrega una representación del producto (nombre y precio) al modelo de lista.
        }

        elementos.setModel(listModel); // Establece el modelo de lista en el componente elementos (una lista en la interfaz gráfica).
        
        // Habilitar la lista para poder seleccionar elementos
        elementos.setEnabled(true); // Habilita el componente elementos para que el usuario pueda interactuar con él (seleccionar productos).
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        carritoArea = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        elementos = new javax.swing.JList<>();
        seguirComprando = new javax.swing.JLabel();
        Eliminar = new javax.swing.JLabel();
        Eliminar1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 102, 255));
        jPanel1.setForeground(new java.awt.Color(204, 102, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CART");

        carritoArea.setEnabled(false);

        elementos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        elementos.setEnabled(false);
        jScrollPane1.setViewportView(elementos);

        javax.swing.GroupLayout carritoAreaLayout = new javax.swing.GroupLayout(carritoArea);
        carritoArea.setLayout(carritoAreaLayout);
        carritoAreaLayout.setHorizontalGroup(
            carritoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        carritoAreaLayout.setVerticalGroup(
            carritoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        seguirComprando.setForeground(new java.awt.Color(255, 255, 255));
        seguirComprando.setText("Continue shopping");
        seguirComprando.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seguirComprandoMouseClicked(evt);
            }
        });

        Eliminar.setForeground(new java.awt.Color(255, 255, 255));
        Eliminar.setText("Delete");
        Eliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EliminarMouseClicked(evt);
            }
        });

        Eliminar1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Eliminar1.setForeground(new java.awt.Color(255, 255, 255));
        Eliminar1.setText("BUY");
        Eliminar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Eliminar1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(seguirComprando, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(carritoArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Eliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(320, 320, 320))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carritoArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seguirComprando)
                    .addComponent(Eliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Eliminar1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seguirComprandoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seguirComprandoMouseClicked
        // TODO add your handling code here:
        this.setVisible(false);

        Menu menu = new Menu();
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
    }//GEN-LAST:event_seguirComprandoMouseClicked

    private void EliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EliminarMouseClicked
        // TODO add your handling code here:
        int indiceSeleccionado = elementos.getSelectedIndex();
    
    if (indiceSeleccionado != -1) { // Verificar que se ha seleccionado algo
        // Obtener el producto seleccionado
        Product productoSeleccionado = carrito.getCarrito().get(indiceSeleccionado);
        
        // Mostrar confirmación antes de eliminar
        int confirmacion = javax.swing.JOptionPane.showConfirmDialog(
                this, 
                "Are you sure you want to delete " + productoSeleccionado.getName() + " from cart?",
                "Confirm delete",
                javax.swing.JOptionPane.YES_NO_OPTION);
        
        if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
            // Eliminar de la base de datos
            boolean eliminado = sql.eliminarProductoDelCarrito(idCliente, productoSeleccionado.getId());
            
            if (eliminado) {
                // Eliminar del ArrayList local
                carrito.getCarrito().remove(indiceSeleccionado);
                
                // Actualizar la visualización
                mostrarProductosEnCarrito();
                
                // Informar al usuario
                javax.swing.JOptionPane.showMessageDialog(
                        this, 
                        "Product successfully removed from cart.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(
                        this, 
                        "No se pudo eliminar el producto del carrito.",
                        "Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        javax.swing.JOptionPane.showMessageDialog(
                this, 
                "Please select a product to remove.",
                "Required selection",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_EliminarMouseClicked

    private void Eliminar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Eliminar1MouseClicked
        // TODO add your handling code here:
        // Verificar si el carrito está vacío
    if (carrito.getCarrito().isEmpty()) {
        // Mostrar mensaje indicando que el carrito está vacío
        javax.swing.JOptionPane.showMessageDialog(
            this,
            "There are no products in the shopping cart.",
            "Empty cart",
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
        return; // Salir del método si no hay productos
    }
    
    // Mostrar mensaje de confirmación al usuario
    int confirmacion = javax.swing.JOptionPane.showConfirmDialog(
        this,
        "Do you want to complete the purchase and generate the invoice?",
        "Confirm purchase",
        javax.swing.JOptionPane.YES_NO_OPTION);
    
    // Si el usuario confirma con "Sí"
    if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
        // Obtener el nombre del cliente desde la base de datos
        String nombreCliente = obtenerNombreCliente(idCliente);
        
        // Generar el PDF de la factura usando el carrito actual
        String rutaPDF = PDFGenerator.generarPDFCompra(carrito.getCarrito(), idCliente, nombreCliente);
        
        // Si la ruta no es nula, es decir, el PDF se generó correctamente
        if (rutaPDF != null) {
            // Registrar la compra en la base de datos
            boolean compraRegistrada = registrarCompraEnBD();
            
            // Si la compra se registró correctamente
            if (compraRegistrada) {
                // Vaciar el carrito en la base de datos
                boolean carritoVaciado = vaciarCarritoEnBD();
                
                // Si también se vació correctamente en la base de datos
                if (carritoVaciado) {
                    // Vaciar el carrito local en memoria
                    carrito.vaciarCarrito();
                    
                    // Actualizar la visualización del carrito
                    mostrarProductosEnCarrito();
                    
                    // Mostrar mensaje de éxito al usuario con la ruta del PDF
                    javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Purchase completed successfully.\nThe invoice has been saved in:" + rutaPDF,
                        "Successful purchase",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    
                    // Preguntar si desea abrir el archivo PDF
                    int abrirPDF = javax.swing.JOptionPane.showConfirmDialog(
                        this,
                        "Do you want to open the invoice in PDF?",
                        "Open invoice",
                        javax.swing.JOptionPane.YES_NO_OPTION);
                    
                    // Si el usuario dice que sí, intentar abrir el archivo
                    if (abrirPDF == javax.swing.JOptionPane.YES_OPTION) {
                        try {
                            java.awt.Desktop.getDesktop().open(new java.io.File(rutaPDF));
                        } catch (java.io.IOException e) {
                            // Mostrar mensaje si ocurre un error al abrir el PDF
                            javax.swing.JOptionPane.showMessageDialog(
                                this,
                                "Could not open PDF file. Path: " + rutaPDF,
                                "Error",
                                javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        }
    }

    }//GEN-LAST:event_Eliminar1MouseClicked
private String obtenerNombreCliente(int idCliente) {
    // Por defecto usamos "Cliente" en caso de error
    String nombreCliente = "Cliente";
    
    try {
        // Usar la conexión a la base de datos
        ConexionDB db = new ConexionDB();
        java.sql.Connection conn = db.conectar();
        
        // Preparar consulta
        String sql = "SELECT nombre FROM clients WHERE id = ?";
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, idCliente);
        
        // Ejecutar consulta
        java.sql.ResultSet rs = pst.executeQuery();
        
        // Obtener resultado
        if (rs.next()) {
            nombreCliente = rs.getString("nombre");
        }
        
        // Cerrar recursos
        rs.close();
        pst.close();
        conn.close();
        
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    }
    
    return nombreCliente;
}

// Método para registrar la compra en la base de datos
private boolean registrarCompraEnBD() {
    boolean resultado = false;
    double total = carrito.getPrecioTotal();
    
    try {
        // Usar la conexión a la base de datos
        ConexionDB db = new ConexionDB();
        java.sql.Connection conn = db.conectar();
        
        // Preparar consulta para insertar en tabla compras (asumiendo que tienes esta tabla)
        String sql = "INSERT INTO compras (id_cliente, fecha, total) VALUES (?, NOW(), ?)";
        java.sql.PreparedStatement pst = conn.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
        pst.setInt(1, idCliente);
        pst.setDouble(2, total);
        
        // Ejecutar consulta
        int filasAfectadas = pst.executeUpdate();
        
        if (filasAfectadas > 0) {
            // Obtener el ID de la compra generado
            java.sql.ResultSet rs = pst.getGeneratedKeys();
            if (rs.next()) {
                int idCompra = rs.getInt(1);
                
                // Registrar cada producto en la tabla detalle_compra (asumiendo que tienes esta tabla)
                for (Product producto : carrito.getCarrito()) {
                    String sqlDetalle = "INSERT INTO detalle_compra (id_compra, id_producto, precio) VALUES (?, ?, ?)";
                    java.sql.PreparedStatement pstDetalle = conn.prepareStatement(sqlDetalle);
                    pstDetalle.setInt(1, idCompra);
                    pstDetalle.setInt(2, producto.getId());
                    pstDetalle.setDouble(3, producto.getPrice());
                    pstDetalle.executeUpdate();
                    pstDetalle.close();
                }
                
                resultado = true;
            }
            rs.close();
        }
        
        // Cerrar recursos
        pst.close();
        conn.close();
        
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(
            this,
            "Error registering purchase:  " + e.getMessage(),
            "Error",
            javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    return resultado;
}

// Método para vaciar el carrito en la base de datos
private boolean vaciarCarritoEnBD() {
    boolean resultado = false;
    
    try {
        // Usar la conexión a la base de datos
        ConexionDB db = new ConexionDB();
        java.sql.Connection conn = db.conectar();
        
        // Preparar consulta para eliminar todos los productos del carrito del cliente
        String sql = "DELETE FROM carrito WHERE id_cliente = ?";
        java.sql.PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, idCliente);
        
        // Ejecutar consulta
        int filasAfectadas = pst.executeUpdate();
        
        // Si se eliminó al menos una fila, consideramos exitoso
        if (filasAfectadas >= 0) {
            resultado = true;
        }
        
        // Cerrar recursos
        pst.close();
        conn.close();
        
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(
            this,
            "Error emptying cart:  " + e.getMessage(),
            "Error",
            javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    return resultado;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       /* Set the Nimbus look and feel */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_Carrito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(() -> {
            // Instancia del carrito sin pasarle parámetros
            Interfaz_Carrito carritojaja = new Interfaz_Carrito();
            carritojaja.setVisible(true);
            carritojaja.setLocationRelativeTo(null);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Eliminar;
    private javax.swing.JLabel Eliminar1;
    private javax.swing.JPanel carritoArea;
    private javax.swing.JList<String> elementos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel seguirComprando;
    // End of variables declaration//GEN-END:variables
}
